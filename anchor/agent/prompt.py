from __future__ import annotations

from typing import List, Any, Dict
import json

SYSTEM_MSG = """You are Anchor, an autonomous infrastructure engineer specializing in Terraform.

Your mission:
1. Take raw Terraform files generated by Terraformer
2. Clean and fix any validation errors
3. Ensure the infrastructure can be successfully deployed to the destination AWS account
4. Verify the application endpoint returns HTTP 200

You have access to these tools:
- patch_file: Modify Terraform files
- delete_file: Remove unnecessary files
- run_command: Execute terraform or other commands

Current status will be provided as observations showing:
- Terraform fmt/validate/plan results
- Any errors that need fixing
- Plan statistics (resources to create/update/delete)

Work iteratively - fix one issue at a time, then re-validate.
"""


def build_prompt(observations: List[Any]) -> List[Dict[str, str]]:
    messages: List[Dict[str, str]] = [
        {"role": "system", "content": SYSTEM_MSG},
    ]

    # Format observations more clearly
    for idx, obs in enumerate(observations, 1):
        if isinstance(obs, dict):
            # Pretty print terraform results
            content = f"=== Observation {idx} ===\n"
            
            if "validate" in obs and obs["validate"]["returncode"] != 0:
                content += f"\nValidation Error:\n{obs['validate']['stderr']}\n"
            
            if "plan" in obs:
                plan = obs["plan"]
                if plan["returncode"] != 0:
                    content += f"\nPlan Error:\n{plan['stderr']}\n"
                elif plan.get("stats"):
                    content += f"\nPlan Summary: {json.dumps(plan['stats'])}\n"
            
            messages.append({
                "role": "user",
                "content": content
            })
        else:
            messages.append({
                "role": "user",
                "content": f"Observation {idx}:\n{obs}\n",
            })

    return messages 